---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/11/7 18:09
--- 提供宏， 用于非Tag能表达的触发条件
---

local M = {}

---大部分情况的判断条件是自己没有死
---@param OwnerID integer
---@param ProjectJEventData FProjectJBattleEventData
---@param BattleManager AProjectJBattleManager
---@return bool
function M:NotDead(OwnerID, ProjectJEventData, BattleManager)
    --- Todo:
    return false;
end
--
-----无论是否因为本次伤害死亡，都会执行
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@return bool
--function M:IsSelfGetDamage(OwnerID, ProjectJEventData)
--    return OwnerID == ProjectJEventData.TargetID;
--end
--
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@return bool
--function M:IsSelfFight(OwnerID, ProjectJEventData)
--    return OwnerID == ProjectJEventData.ExecutorID;
--end
--
-----自己昏厥时
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsSelfDead(OwnerID, Capture, ProjectJEventData, BattleManager)
--    local IsSelf = OwnerID == ProjectJEventData.TriggeredID;
--    return IsSelf and BattleManager:GetIsDead(OwnerID, Capture);
--end
--
-----是否自己攻击
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsSelfAttack(OwnerID, Capture, ProjectJEventData, BattleManager)
--    return OwnerID == ProjectJEventData.ExecutorID and M:NotDead(OwnerID, Capture, ProjectJEventData, BattleManager);
--end
--
----- 前方伙伴攻击后
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsFrontTeammateAttack(OwnerID, Capture, ProjectJEventData, BattleManager)
--    if BattleManager:GetIsDead(OwnerID, Capture) then
--        return false;
--    end
--    
--    local AfterAttackerID = ProjectJEventData.EventKVs:Find(AfterAttackerIDKey);
--    --local Keys = ProjectJEventData.EventKVs:Keys();
--    ---打印Keys
--    --for i = 1, Keys:Length() do
--    --    print(OwnerID, ProjectJEventData.EventTag.TagName, Keys[i]);
--    --end
--    --
--    if AfterAttackerID == nil then
--        --print("AfterAttackerID is nil");
--        return false;
--    end
--    
--    --print("lua AfterAttackerID", AfterAttackerID, "IsOwner:", tonumber(AfterAttackerID) == OwnerID);
--    return tonumber(AfterAttackerID) == OwnerID;
--end
--
-----@param AID integer
-----@param BID integer
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsTeammate(AID, BID, Capture, BattleManager)
--    if AID == BID then
--        return false;
--    end
--    
--    local ATeam = BattleManager:GetTeam(AID, Capture);
--    local BTeam = BattleManager:GetTeam(BID, Capture);
--    return ATeam == BTeam;
--end
--
-----@param AID integer
-----@param BID integer
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsOpponent(AID, BID, Capture, BattleManager)
--    --- 不能通过IsTeammate取反判断是否对手的原因是， 当AID == BID时， IsTeammate返回false
--    if AID == BID then
--        return false;
--    end
--
--    local ATeam = BattleManager:GetTeam(AID, Capture);
--    local BTeam = BattleManager:GetTeam(BID, Capture);
--    return ATeam ~= BTeam;
--end
--
-----自己获得装备时
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@param BattleManager AProjectJBattleManager
-----@return bool
--function M:IsSelfGetEquipment(OwnerID, ProjectJEventData, BattleManager)
--    if OwnerID ~= ProjectJEventData.TargetID then
--        return false;
--    end
--    
--    local ItemConfigRow = ProjectJEventData.EventKVs:Find(ItemConfigRowKey);
--    return BattleManager:ItemHasTag(Item_Equipment, ItemConfigRow);
--end
--
-----@param OwnerID integer
-----@param ProjectJEventData FProjectJBattleEventData
-----@return bool
--function M:IsSellOther(OwnerID, ProjectJEventData)
--    return OwnerID ~= ProjectJEventData.TargetID;
--end

return M